#ifndef _MAP_H
#define _MAP_H



#define MAX_GEAR  7

#define MAP_LEFT   0
#define MAP_RIGHT  800
#define MAP_TOP    35
#define MAP_BOTTOM 480

#define MAP_LEFT_LG  6720000   /// E =112°
#define MAP_RIGHT_LG 8100000  ///  E = 135°
#define MAP_TOP_LT   2460000 ///   N = 41
#define MAP_BOTTOM_LT 210000  //   N =3.5°

#define MAP_WIDTH (MAP_RIGHT-MAP_LEFT)
#define MAP_HEIGHT (MAP_BOTTOM-MAP_TOP)

//#define map_width 800 //mapwidth
//#define map_height 480	//mapheight
#define N_areaRecord 86		//the fish number array count
#define distance 30000 //used in display latitude and finish number calculate
#define mul_pow 1000   //I use 1000 times of the minute when calculate longtitude and latitude

#define fish_number_x_shift -10;  //the text can be move, tune this number to make in the middle or other place
#define fish_number_y_shift -30;

#define latitude_display_x_shift -100 //the latitude text can be move
#define latitude_display_y_shift 5

#define longitude_display_x_shift 0 //longitude can be move
#define longitude_display_y_shift 0

#define x_shift_10000 -16   //tune of small fish number text
#define y_shift_10000 0

#define small_fish_number 10000  //10 minute, one grid for a small fish
#define big_fish_number 30000   //30minute big

#define center_shift_x_small 0
#define center_shift_y_small 0 //center point(x,y) can be moved for fitting screen

#define flip_speed_long (MAP_WIDTH>>1)	//how much of the page you want to turn
#define flip_speed_lat (MAP_HEIGHT>>1)

#define speed_up_after 5 //200ms for a time count, after this number, speed up the cursor
#define CURSOR_SPEED_FAST 40 //how fast whent cursor run in a high speed
#define CURSOR_SPEED_SLOW 20


//#ifndef KEY_TIMER_MODE
// #define KEY_TIMER_MODE
//#endif

#define tip_width 160
#define tip_height 90


						
struct fishing_map{
	 long lg;
	 long lt;
	 short bgnId;
	 short orgAreaNum;
  short expAreaNum;
  short expMaskIdL;
  short expMaskIdR;
};


typedef struct  _FISHING_AREA_RECORD FISHING_AREA_RECORD;
struct _FISHING_AREA_RECORD
{
	 long lg;
	 long lt;
	 short bgnId;
	 short orgAreaNum;
  short expAreaNum;
  short expMaskIdL;
  short expMaskIdR;
};

//struct scale_map{
//	 short pixel;
//	 long minute_km;
//	 long scaleVal;
//	 long minute;
//};

struct map_scale{
     short pixel;
     long  minute;
};
	
struct mapping{
	 long lgtude;
	 long lttude;
	 short x;
	 short y;
};

struct _cursor{
	int x;
	int y;
	long longitude;
	long latitude;
	short speed;
};


typedef struct map_scale map_scale;
typedef struct fishing_map fishing_map;
typedef struct mapping mapping;
typedef struct _cursor _cursor;


const static map_scale measuring_scale[8]  =
                                            {
                                             {150, 30000},      //36km   /3  cm
                                             {125, 10000},      //18km   /2.5cm 
                                             {100, 5000},       //9km    /2  cm
                                             {150, 3000},       //3.6km  /3  cm
                                             {125, 1000},       //1.8km  /2.5cm
                                             {125, 500},        //0.9km  /2.5cm
                                             {100, 300},        //0.36km /2  cm
                                             {100, 100}         //0.18km /2  cm
                                            };
                                            
const static FISHING_AREA_RECORD fishingAreaRecord[N_areaRecord] =
{
   
///  lg        lt    bgnId  orgAreaNum  expAreaNum  expMaskIdL   expMaskIdR
  {7230000, 2460000,   1   ,    4     ,      0    ,       0    ,       0     },
  {7200000, 2430000,   5   ,    5     ,      0    ,       0    ,       0     },
  {7140000, 2400000,  10   ,    6     ,      0    ,       0    ,       0     },
  {7350000, 2400000,  16   ,    4     ,      0    ,       0    ,       0     },
  {7050000, 2370000,  20   ,   14     ,      0    ,       0    ,       0     },
  {7050000, 2340000,  34   ,   13     ,      0    ,       0    ,       0     },
  {7050000, 2310000,  47   ,   13     ,      0    ,       0    ,       0     },
  {7110000, 2280000,  60   ,   11     ,      2    ,       0    ,       0     },
  {7110000, 2250000,  71   ,    3     ,      0    ,       0    ,       0     },
  {7350000, 2250000,  74   ,    3     ,      2    ,       0    ,       0     },
  {7260000, 2220000,  77   ,    6     ,      2    ,       0    ,       0     },
  {7230000, 2190000,  83   ,    7     ,      2    ,       0    ,       0     },
  {7170000, 2160000,  90   ,    9     ,      2    ,       0    ,       0     },
  {7140000, 2130000,  99   ,   10     ,     14    ,       3    ,      11     },
  {7140000, 2100000, 109   ,   10     ,     14    ,       4    ,      10     },
  {7200000, 2070000, 119   ,    8     ,     14    ,       5    ,       8     },
  {7230000, 2040000, 127   ,    9     ,      9    ,       3    ,       4     },
  {7230000, 2010000, 136   ,    9     ,      7    ,       3    ,       4     },
  {7260000, 1980000, 145   ,    8     ,      7    ,       0    ,       0     },
  {7290000, 1950000, 153   ,    7     ,      9    ,       0    ,       0     },
  {7290000, 1920000, 160   ,    7     ,      9    ,       0    ,       0     },
  {7290000, 1890000, 167   ,    7     ,      9    ,       0    ,       0     },
  {7260000, 1860000, 174   ,    8     ,      9    ,       0    ,       0     },
  {7260000, 1830000, 182   ,    8     ,      9    ,       0    ,       0     },
  {7320000, 1800000, 190   ,    6     ,      9    ,       0    ,       0     },
  {7320000, 1770000, 196   ,    6     ,      8    ,       0    ,       0     },
  {7290000, 1740000, 202   ,    7     ,      8    ,       0    ,       0     },
  {7260000, 1710000, 209   ,    8     ,      8    ,       0    ,       0     },
  {7230000, 1680000, 217   ,    9     ,      7    ,       0    ,       0     },
  {7230000, 1650000, 226   ,    9     ,      6    ,       0    ,       0     },
  {7200000, 1620000, 235   ,    9     ,      6    ,       0    ,       0     },
  {7170000, 1590000, 244   ,   10     ,      4    ,       0    ,       0     },
  {7170000, 1560000, 254   ,    9     ,      4    ,       0    ,       0     },
  {7140000, 1530000, 263   ,   10     ,      4    ,       0    ,       0     },
  {7110000, 1500000, 273   ,    5     ,      0    ,       0    ,       0     },
  {7290000, 1500000, 278   ,    4     ,      0    ,       0    ,       0     },
  {7080000, 1470000, 282   ,    5     ,      0    ,       0    ,       0     },
  {7290000, 1470000, 287   ,    4     ,      0    ,       0    ,       0     },
  {7050000, 1440000, 291   ,    6     ,      0    ,       0    ,       0     },
  {7290000, 1440000, 297   ,    3     ,      0    ,       0    ,       0     },
  {6990000, 1410000, 300   ,    7     ,      0    ,       0    ,       0     },
  {7290000, 1410000, 307   ,    3     ,      0    ,       0    ,       0     },
  {6900000, 1380000, 310   ,   11     ,      0    ,       0    ,       0     },
  {7260000, 1380000, 321   ,    3     ,      0    ,       0    ,       0     },
  {6840000, 1350000, 324   ,   17     ,      0    ,       0    ,       0     },
  {6720000, 1320000, 341   ,   20     ,      0    ,       0    ,       0     },
  {6480000, 1290000, 361   ,    4     ,      0    ,       0    ,       0     },
  {6630000, 1290000, 365   ,   21     ,      0    ,       0    ,       0     },
  {6420000, 1260000, 386   ,   26     ,      0    ,       0    ,       0     },
  {6390000, 1230000, 412   ,   27     ,      0    ,       0    ,       0     },
  {6360000, 1200000, 439   ,    7     ,      0    ,       0    ,       0     },
  {6660000, 1200000, 446   ,   17     ,      0    ,       0    ,       0     },
  {6360000, 1170000, 463   ,    5     ,      0    ,       0    ,       0     },
  {6630000, 1170000, 468   ,   18     ,      0    ,       0    ,       0     },
  {6360000, 1140000, 486   ,    5     ,      0    ,       0    ,       0     },
  {6600000, 1140000, 491   ,   18     ,      0    ,       0    ,       0     },
  {6390000, 1110000, 509   ,   24     ,      0    ,       0    ,       0     },
  {6420000, 1080000, 533   ,   22     ,      0    ,       0    ,       0     },
  {6450000, 1050000, 555   ,   23     ,      0    ,       0    ,       0     },
  {6540000, 1020000, 578   ,   20     ,      0    ,       0    ,       0     },
  {6570000,  990000, 598   ,   19     ,      0    ,       0    ,       0     },
  {6600000,  960000, 617   ,   18     ,      0    ,       0    ,       0     },
  {6630000,  930000, 635   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  900000, 652   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  870000, 669   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  840000, 686   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  810000, 703   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  780000, 720   ,   17     ,      0    ,       0    ,       0     },
  {6630000,  750000, 737   ,   16     ,      0    ,       0    ,       0     },
  {6630000,  720000, 753   ,   16     ,      0    ,       0    ,       0     },
  {6630000,  690000, 769   ,   15     ,      0    ,       0    ,       0     },
  {6630000,  660000, 784   ,   15     ,      0    ,       0    ,       0     },
  {6630000,  630000, 799   ,   15     ,      0    ,       0    ,       0     },
  {6600000,  600000, 814   ,   15     ,      0    ,       0    ,       0     },
  {6570000,  570000, 829   ,   15     ,      0    ,       0    ,       0     },
  {6570000,  540000, 844   ,   14     ,      0    ,       0    ,       0     },
  {6540000,  510000, 858   ,   14     ,      0    ,       0    ,       0     },
  {6540000,  480000, 872   ,   13     ,      0    ,       0    ,       0     },
  {6540000,  450000, 885   ,   13     ,      0    ,       0    ,       0     },
  {6540000,  420000, 898   ,   12     ,      0    ,       0    ,       0     },
  {6570000,  390000, 910   ,   10     ,      0    ,       0    ,       0     },
  {6600000,  360000, 920   ,    9     ,      0    ,       0    ,       0     },
  {6630000,  330000, 929   ,    6     ,      0    ,       0    ,       0     },
  {6660000,  300000, 935   ,    5     ,      0    ,       0    ,       0     },
  {6660000,  270000, 940   ,    4     ,      0    ,       0    ,       0     },
  {6690000,  240000, 944   ,    2     ,      0    ,       0    ,       0     }
};

                                            
/*
const static fishing_map fishing_area[N_fishingArea] = 
{
{7230000,2460000,1,0}, //?????,????,?????
{7200000,2430000,5,0},
{7140000,2400000,10,0},
{7050000,2370000,20,0}, // ?????,????,????
{7050000,2340000,34,0},
{7050000,2310000,47,0},
{7110000,2280000,60,1},
{7110000,2250000,71,2}, //???? , ????,????
{7260000,2220000,77,2},
{7230000,2190000,83,2},
{7170000,2160000,90,2},//?????,?????,????
{7140000,2130000,99,14},
{7140000,2100000,109,14},
{7200000,2070000,119,14},
{7230000,2040000,127,9}, //????,????
{7230000,2010000,136,8},
{7260000,1980000,145,7},
{7290000,1950000,153,9},
{7290000,1920000,160,9}, //?????
{7290000,1890000,167,9},
{7260000,1860000,174,9}, //????
{7260000,1830000,182,9},
{7320000,1800000,190,9},
{7320000,1770000,196,8}, //????
{7290000,1740000,202,8},
{7260000,1710000,209,8},
{7230000,1680000,217,7}, //???? 
{7230000,1650000,226,6},
{7200000,1620000,235,6}, //????
{7170000,1590000,244,4},
{7170000,1560000,254,4}, //???? ,????
{7140000,1530000,263,4},
{7110000,1500000,273,0},
{7080000,1470000,282,0}, //????
{7050000,1440000,291,0},
{6990000,1410000,300,0},
{6900000,1380000,310,0}, //????,??????
{6810000,1350000,324,0},
{7020000,1320000,341,0}, //????,??????
{6480000,1290000,361,0},
{6420000,1260000,386,0},
{6390000,1230000,412,0},
{6360000,1200000,439,0},
{6360000,1170000,463,0},
{6360000,1140000,486,0},
{6390000,1110000,509,0},
{6420000,1080000,533,0},
{6450000,1050000,555,0},
{6540000,1020000,578,0},
{6570000,990000,598,0},
{6600000,960000,617,0},  //??????
{6630000,930000,635,0},
{6630000,900000,652,0},
{6630000,870000,669,0},
{6630000,840000,686,0},
{6630000,810000,703,0},
{6630000,780000,720,0},
{6630000,750000,737,0},
{6630000,720000,753,0},
{6630000,690000,769,0},
{6630000,660000,784,0},
{6630000,630000,799,0},
{6600000,600000,814,0}, // ????/????
{6570000,570000,829,0},
{6570000,540000,844,0},
{6540000,510000,858,0},
{6540000,480000,872,0},
{6540000,450000,885,0},
{6540000,420000,898,0},
{6570000,390000,910,0},
{6600000,360000,920,0},
{6630000,330000,929,0},
{6660000,300000,935,0}, // ??????
{6660000,270000,940,0},
{6690000,240000,944,0},
{6690000,210000,946,0},
};
*/

#endif
